const int sensorPin = 0; //pin A0 == analog pin 0
const int ledPin = 9; 

int lightLevel, low = 0, high = 1023;

#include "pitches.h" //speaker relevant 

// notes in the melody:
int melody[] = {

  NOTE_C4, NOTE_G3, NOTE_G3, NOTE_A3, NOTE_G3, 0, NOTE_B3, NOTE_C4
};

// note durations: 4 = quarter note, 8 = eighth note, etc.:
int noteDurations[] = {

  4, 8, 8, 4, 4, 4, 4, 4
};
//Above this was setting up the parameters to do the pitch, might need to include "pitches.h"
void setup()
{
  //Setting pin 9 as the output
  pinMode(ledPin, OUTPUT);
  Serial.begin(9600);
}



void loop()
{

  lightLevel = analogRead(sensorPin);

  //manualTune();  // manually change the range from light to dark

  autoTune();  // have the Arduino do the work for us!


  analogWrite(ledPin, lightLevel);
  Serial.println(lightLevel);

}

void autoTune()
{

  if (lightLevel < low)
  {
    low = lightLevel;
  }


  if (lightLevel > high)
  {
    high = lightLevel;
// Thinking of implementing the speaker trigger here
  for (int thisNote = 0; thisNote < 8; thisNote++) {

    // to calculate the note duration, take one second divided by the note type.

    //e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.

    int noteDuration = 1000 / noteDurations[thisNote];

    tone(8, melody[thisNote], noteDuration);

    // to distinguish the notes, set a minimum time between them.

    // the note's duration + 30% seems to work well:

    int pauseBetweenNotes = noteDuration * 1.30;

    delay(pauseBetweenNotes);

    // stop the tone playing:

    noTone(8);
//This probably won't work, might need to update pins and light level triggers
  }
  
  lightLevel = map(lightLevel, low+30, high-30, 0, 255);
  lightLevel = constrain(lightLevel, 0, 255);
  }

}
